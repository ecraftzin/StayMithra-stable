plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.staymitra.in"
    compileSdk = 35
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug.keystore')
            storePassword 'android'
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.staymithra.app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 23
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {}

// Task to copy APK to Flutter expected location
task copyApkToFlutterLocation {
    doLast {
        def buildDir = project.rootDir.parentFile
        def flutterApkDir = new File(buildDir, "build/app/outputs/flutter-apk")
        flutterApkDir.mkdirs()

        // Copy debug APK
        def debugApk = new File(project.buildDir, "outputs/flutter-apk/app-debug.apk")
        if (debugApk.exists()) {
            def targetDebugApk = new File(flutterApkDir, "app-debug.apk")
            copy {
                from debugApk
                into flutterApkDir
                rename { "app-debug.apk" }
            }
            println "Copied debug APK to: ${targetDebugApk.absolutePath}"
        }

        // Copy release APK
        def releaseApk = new File(project.buildDir, "outputs/flutter-apk/app-release.apk")
        if (releaseApk.exists()) {
            def targetReleaseApk = new File(flutterApkDir, "app-release.apk")
            copy {
                from releaseApk
                into flutterApkDir
                rename { "app-release.apk" }
            }
            println "Copied release APK to: ${targetReleaseApk.absolutePath}"
        }
    }
}

// Run the copy task after assembling
afterEvaluate {
    tasks.matching { it.name.startsWith('assemble') }.all { task ->
        task.finalizedBy copyApkToFlutterLocation
    }
}
