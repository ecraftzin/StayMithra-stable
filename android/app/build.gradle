plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Removed ABI codes to fix build issues

android {
    namespace "com.staymithra.app"
    compileSdk = 35
    ndkVersion = "27.0.12077973"

    // AAPT2 optimization settings to prevent daemon crashes
    aaptOptions {
        noCompress 'tflite'
        noCompress 'lite'
        cruncherEnabled = false  // Disable PNG crunching to reduce memory pressure
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug.keystore')
            storePassword 'android'
        }
        release {
            // For now, use debug keystore for release builds
            // TODO: Replace with proper release keystore for production
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug.keystore')
            storePassword 'android'
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.staymithra.app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 23
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true

        // ABI filtering will be handled by splits configuration

        // Additional size optimizations - more conservative resource filtering
        resConfigs "en"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // Additional size optimizations
            zipAlignEnabled true
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            pseudoLocalesEnabled false

            // Disabled aggressive PNG crunching to prevent AAPT2 crashes
            // crunchPngs true // Disabled to prevent memory issues

            // R8 is used by default when minifyEnabled is true

            // Additional optimizations
            ndk {
                debugSymbolLevel 'NONE' // Remove debug symbols
            }
        }
    }

    // Enable ABI splitting for smaller APKs (removed deprecated density splits)
    splits {
        abi {
            enable true
            reset()
            include 'arm64-v8a', 'armeabi-v7a', 'x86_64', 'x86'
            universalApk false  // Disable universal APK to keep sizes small
        }
        // Removed deprecated density splits - use App Bundle instead
    }


}

flutter {
    source '../..'
}

// Removed problematic ABI configuration for now

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
}

// Task to copy APK to Flutter expected location
task copyApkToFlutterLocation {
    doLast {
        def buildDir = project.rootDir.parentFile
        def flutterApkDir = new File(buildDir, "build/app/outputs/flutter-apk")
        flutterApkDir.mkdirs()

        // Copy debug APK - prefer x86_64 for emulators, then arm64-v8a, fallback to armeabi-v7a
        def debugApkX86_64 = new File(project.buildDir, "outputs/flutter-apk/app-x86_64-debug.apk")
        def debugApkX86 = new File(project.buildDir, "outputs/flutter-apk/app-x86-debug.apk")
        def debugApkArm64 = new File(project.buildDir, "outputs/flutter-apk/app-arm64-v8a-debug.apk")
        def debugApkArm32 = new File(project.buildDir, "outputs/flutter-apk/app-armeabi-v7a-debug.apk")
        def debugApkUniversal = new File(project.buildDir, "outputs/flutter-apk/app-debug.apk")

        if (debugApkX86_64.exists()) {
            copy {
                from debugApkX86_64
                into flutterApkDir
                rename { "app-debug.apk" }
            }
            println "Copied x86_64 debug APK to: ${flutterApkDir}/app-debug.apk"
        } else if (debugApkX86.exists()) {
            copy {
                from debugApkX86
                into flutterApkDir
                rename { "app-debug.apk" }
            }
            println "Copied x86 debug APK to: ${flutterApkDir}/app-debug.apk"
        } else if (debugApkArm64.exists()) {
            copy {
                from debugApkArm64
                into flutterApkDir
                rename { "app-debug.apk" }
            }
            println "Copied arm64-v8a debug APK to: ${flutterApkDir}/app-debug.apk"
        } else if (debugApkArm32.exists()) {
            copy {
                from debugApkArm32
                into flutterApkDir
                rename { "app-debug.apk" }
            }
            println "Copied armeabi-v7a debug APK to: ${flutterApkDir}/app-debug.apk"
        } else if (debugApkUniversal.exists()) {
            copy {
                from debugApkUniversal
                into flutterApkDir
                rename { "app-debug.apk" }
            }
            println "Copied universal debug APK to: ${flutterApkDir}/app-debug.apk"
        }

        // Copy release APK - prefer x86_64 for emulators, then arm64-v8a, fallback to armeabi-v7a
        def releaseApkX86_64 = new File(project.buildDir, "outputs/flutter-apk/app-x86_64-release.apk")
        def releaseApkX86 = new File(project.buildDir, "outputs/flutter-apk/app-x86-release.apk")
        def releaseApkArm64 = new File(project.buildDir, "outputs/flutter-apk/app-arm64-v8a-release.apk")
        def releaseApkArm32 = new File(project.buildDir, "outputs/flutter-apk/app-armeabi-v7a-release.apk")
        def releaseApkUniversal = new File(project.buildDir, "outputs/flutter-apk/app-release.apk")

        if (releaseApkX86_64.exists()) {
            copy {
                from releaseApkX86_64
                into flutterApkDir
                rename { "app-release.apk" }
            }
            println "Copied x86_64 release APK to: ${flutterApkDir}/app-release.apk"
        } else if (releaseApkX86.exists()) {
            copy {
                from releaseApkX86
                into flutterApkDir
                rename { "app-release.apk" }
            }
            println "Copied x86 release APK to: ${flutterApkDir}/app-release.apk"
        } else if (releaseApkArm64.exists()) {
            copy {
                from releaseApkArm64
                into flutterApkDir
                rename { "app-release.apk" }
            }
            println "Copied arm64-v8a release APK to: ${flutterApkDir}/app-release.apk"
        } else if (releaseApkArm32.exists()) {
            copy {
                from releaseApkArm32
                into flutterApkDir
                rename { "app-release.apk" }
            }
            println "Copied armeabi-v7a release APK to: ${flutterApkDir}/app-release.apk"
        } else if (releaseApkUniversal.exists()) {
            copy {
                from releaseApkUniversal
                into flutterApkDir
                rename { "app-release.apk" }
            }
            println "Copied universal release APK to: ${flutterApkDir}/app-release.apk"
        }
    }
}

// Run the copy task after assembling
afterEvaluate {
    tasks.matching { it.name.startsWith('assemble') }.all { task ->
        task.finalizedBy copyApkToFlutterLocation
    }
}
